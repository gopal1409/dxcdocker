########how to create roles#########
 192  mkdir roles
  193  cd roles
  194  ansible-galaxy init apache
  195  apt install tree
  196  tree apache
  ######creating some role#####
  201  touch apache/tasks/install.yml
  202  touch apache/tasks/configure.yml
  203  touch apache/tasks/service.yml
  204  nano apache/tasks/install.yml
  #######inside install.yml
  ---
  - name: install apache2
    apt: name=apache2 state=latest
####lets configure the role##3
root@ansiblemaster:~/roles# cat apache/tasks/configure.yml
---
- name: copy index.html
  copy: src=files/index.html dest=/var/www/html/index.html
nano apache/files/index.html
root@ansiblemaster:~/roles# cat apache/files/index.html
this is the role we have created using ansible
#######service for role
nano apache/tasks/service.yml
root@ansiblemaster:~/roles# cat apache/tasks/service.yml
---
- name: start and enable httpd
  service: name=apache2 state=restarted enabled=yes
  #########Role execution
   220  nano apacheweb.yml
   root@ansiblemaster:~/roles# cat apacheweb.yml
---
- hosts: client
  roles:
  - apache
#####excute the role
222  ansible-playbook apacheweb.yml
#####configuring main.yml in task
nano apache/tasks/main.yml
root@ansiblemaster:~/roles# cat apache/tasks/main.yml
---
# tasks file for apache
- import_tasks: install.yml
- import_tasks: configure.yml
- import_tasks: service.yml

  ###########intialized tomcat role#######
  238  ansible-galaxy init tomcat
  239  ls
  240  tree
########tomcat role
####varaible
nano tomcat/vars/main.yml
root@ansiblemaster:~/roles# cat tomcat/vars/main.yml
---
# vars file for tomcat
tomcat_download_url: "https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.62/bin/apache-tomcat-9.0.62.tar.gz"
tomcat_download_location: /usr/share/tomcat/apache-tomcat-9.0.62.tar.gz
#####tomcat task##########
nano tomcat/tasks/main.yml
- name: update my ubuntu system
  apt:
       update_cache: yes
- name: install openjdk
  apt:
       name: default-jdk
       state: present
- name: add the group tomcat
  group:
      name: tomcat
      state: present
- name: add a user tomcat
  user:
       name: tomcat
       group: tomcat
       home: /usr/share/tomcat
       createhome: no
       state: present
- name: create a tomcat directory
  file:
       path: /usr/share/tomcat
       state: directory
       owner: tomcat
       group: tomcat
- name: download tomcat
  get_url:
       url: "{{ tomcat_download_url }}"
       dest: "{{ tomcat_download_location }}"
- name: unarchive the tomcat
  unarchive:
       src: "{{ tomcat_download_location }}"
       dest: /usr/share/tomcat
       owner: tomcat
       group: tomcat
       remote_src: yes
       extra_opts: "--strip-components=1"
- name: copy the tomcat service file
  template:
       src: templates/tomcat.service.j2
       dest: /etc/systemd/system/tomcat.service
  when: ansible_service_mgr == "systemd"
- name: Start and enable tomcat
  service:
       daemon_reload: yes
       name: tomcat
       state: started
       enabled: yes
   when: ansible_service_mgr == "systemd"
#############in template we will put the j2#####

nano tomcat/templates/tomcat.service.j2

[Unit]
Description=Tomcat
After=network.target

[Service]
Type=forking

User=tomcat
Group=tomcat

Environment=JAVA_HOME=/usr/lib/jvm/default-java
Environment=CATALINA_HOME=/usr/share/tomcat
Environment=CATALINA_BASE=/usr/share/tomcat
Environment=CATALINA_PID=/usr/share/tomcat/temp/tomcat.pid

ExecStart=/usr/share/tomcat/bin/startup.sh
ExecStop=/usr/share/tomcat/bin/shutdown.sh

[Install]
	WantedBy=multi-user.target
#######patching kernal level
262  ansible-galaxy init patch
  263  nano patch/tasks/main.yml
    - name: install apache
      shell: if ps -eaf| egrep 'apache2'| grep -v grep > /dev/null; then echo 'process_running'; else echo 'process_not_running'; fi
      ignore_errors: true 
      register: app_proc_check
    - debug: msg="{{ app_proc_check.stdout }}"
    - name: Decisiong point to start patching
      fail: 
        msg="{{inventory_hostname}} having running appliucation please stop it then attempt patching"
      when: app_proc_check.stdout == "process_running"
    - name: current kernal version 
      shell: uname -r 
      register: curr_ker
    - debug: msg="{{ curr_ker.stdout }}"
    - name: intiatiating patching
      apt:
        upgrade: yes 
        update_cache: yes
      register: apt_update 
    - debug: msg="kernal has been update"
    - name: check if reboot is required 
      shell: kernel_new=$(uname -msr | head -1| awk '{print $1}'| sed 's/kernel-//g'); kernel_now=$(uname -r); if [[ $kernel_new != $kernel_now ]]; then echo "reboot is required"; else echo "reboot is not required"; fi
      ignore_errors:
      register: reboot_check 
    - debug: msg="{{reboot_check.stdout}}"
    - name: Reboot the system after patching
      shell: "shutdown -r now"
      async: 15
      poll: 0
    - name: wait for the system to come up 
      pause:
        minutes: 2
    - name: new kernal version 
      shell: uname -r 
      register: new_ker
    - debug: msg="new kernal version is {{new_ker.stdout}} and old kernal version was {{curr_ker.stdout}}"
    
    ########add it in role#######
     nano apacheweb.yml
root@ansiblemaster:~/roles# cat apacheweb.yml
---
- hosts: client
  roles:
  - apache
  - tomcat
  - patch


